{"version":3,"sources":["src/app/services/service.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Injectable\n} from '@angular/core';\nimport {\n    HttpClient,\n    HttpHeaders\n} from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class ServiceService {\n    public posturl: string = \"/a/login\"; //登录\n    public geturl: string = \"/a/article/search\" //获取数据\n    public putStatusUrl: string = \"/a/u/article/status\" //修改上下线\n    public editUrl: string = \"/a/article\" //编辑时获得单个数据\n    public Url: string = \"/a/u/article\" //上传，编辑,删除\n    public loginOutUrl: string = \"/a/logout\" //退出系统\n\n    public requestHeader = {\n        headers: new HttpHeaders({\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        })\n    }\n\n    constructor(private http: HttpClient) {} //小括号内是初始化HttpClient模块,之后http就是代表HttpClient\n\n    // -------------------------------获取数据的GET方法-------------------------------\n    getData(cs ? ) {\n        return this.http.get(\n            this.geturl, {\n                params: cs //第一个params是固定的，第二个cs是形参\n            }\n        )\n    }\n\n    // -------------------------------登录接口的POST方法-------------------------------\n    postData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.post(\n            this.posturl, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------新增数据的POST方法-------------------------------\n    upload(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.post(\n            this.Url, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------修改上下线的PUT方法-------------------------------\n    putStatusData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.put(\n            this.putStatusUrl, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------编辑获取单个数据的GET方法-------------------------------\n    editData(cs) {\n        return this.http.get(\n            `${this.editUrl}/${cs}`\n        )\n    }\n    // -------------------------------编辑后上传数据的PUT方法-------------------------------\n    putData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.put(\n            `${this.Url}/${data.id}`, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------删除数据的Delete方法-------------------------------\n    deleteData(params) {\n        return this.http.delete(\n            `${this.Url}/${params}`\n        )\n    }\n\n    // -------------------------------退出系统的Post方法-------------------------------\n\n    cancel() {\n        return this.http.post(\n            this.loginOutUrl, this.requestHeader\n        )\n    }\n\n\n\n    // 以下方法的作用是把格式进行你序列化，post方法需要用到,和上面的paramFormat(data)相呼应。\n    // 作用是把对象格式转换字符串格式\"key=value&key=value&key=value\"\n    paramFormat(data: any) {\n        let paramStr = '',\n            name, value, subName, innerObj;\n        let that = this;\n        for (name in data) {\n            value = data[name];\n            if (value instanceof Array) {\n                for (let i of value) {\n                    subName = name;\n                    innerObj = {};\n                    innerObj[subName] = i;\n                    paramStr += this.paramFormat(innerObj) + '&';\n                }\n            } else if (value instanceof Object) {\n                Object.keys(value).forEach(function (key) {\n                    subName = name + '[' + key + ']';\n                    innerObj = {};\n                    innerObj[subName] = value[key];\n                    paramStr += that.paramFormat(innerObj) + '&';\n                });\n            } else if (value !== undefined && value !== null) {\n                paramStr += encodeURIComponent(name) + '=' +\n                    encodeURIComponent(value) + '&';\n            }\n        }\n        return paramStr.length ? paramStr.substr(0, paramStr.length - 1) : paramStr;\n    }\n}\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}