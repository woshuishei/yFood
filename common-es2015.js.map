{"version":3,"sources":["./src/app/services/service.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import {\n    Injectable\n} from '@angular/core';\nimport {\n    HttpClient,\n    HttpHeaders\n} from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class ServiceService {\n    public posturl: string = \"/a/login\"; //登录\n    public geturl: string = \"/a/article/search\" //获取数据\n    public putStatusUrl: string = \"/a/u/article/status\" //修改上下线\n    public editUrl: string = \"/a/article\" //编辑时获得单个数据\n    public Url: string = \"/a/u/article\" //上传，编辑,删除\n    public loginOutUrl: string = \"/a/logout\" //退出系统\n\n    public requestHeader = {\n        headers: new HttpHeaders({\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        })\n    }\n\n    constructor(private http: HttpClient) {} //小括号内是初始化HttpClient模块,之后http就是代表HttpClient\n\n    // -------------------------------获取数据的GET方法-------------------------------\n    getData(cs ? ) {\n        return this.http.get(\n            this.geturl, {\n                params: cs //第一个params是固定的，第二个cs是形参\n            }\n        )\n    }\n\n    // -------------------------------登录接口的POST方法-------------------------------\n    postData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.post(\n            this.posturl, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------新增数据的POST方法-------------------------------\n    upload(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.post(\n            this.Url, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------修改上下线的PUT方法-------------------------------\n    putStatusData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.put(\n            this.putStatusUrl, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------编辑获取单个数据的GET方法-------------------------------\n    editData(cs) {\n        return this.http.get(\n            `${this.editUrl}/${cs}`\n        )\n    }\n    // -------------------------------编辑后上传数据的PUT方法-------------------------------\n    putData(data) {\n        const params = typeof (data) === 'object' && String(data) !== '[object File]' ? this.paramFormat(data) : data;\n        return this.http.put(\n            `${this.Url}/${data.id}`, params, this.requestHeader\n        )\n    }\n\n    // -------------------------------删除数据的Delete方法-------------------------------\n    deleteData(params) {\n        return this.http.delete(\n            `${this.Url}/${params}`\n        )\n    }\n\n    // -------------------------------退出系统的Post方法-------------------------------\n\n    cancel() {\n        return this.http.post(\n            this.loginOutUrl, this.requestHeader\n        )\n    }\n\n\n\n    // 以下方法的作用是把格式进行你序列化，post方法需要用到,和上面的paramFormat(data)相呼应。\n    // 作用是把对象格式转换字符串格式\"key=value&key=value&key=value\"\n    paramFormat(data: any) {\n        let paramStr = '',\n            name, value, subName, innerObj;\n        let that = this;\n        for (name in data) {\n            value = data[name];\n            if (value instanceof Array) {\n                for (let i of value) {\n                    subName = name;\n                    innerObj = {};\n                    innerObj[subName] = i;\n                    paramStr += this.paramFormat(innerObj) + '&';\n                }\n            } else if (value instanceof Object) {\n                Object.keys(value).forEach(function (key) {\n                    subName = name + '[' + key + ']';\n                    innerObj = {};\n                    innerObj[subName] = value[key];\n                    paramStr += that.paramFormat(innerObj) + '&';\n                });\n            } else if (value !== undefined && value !== null) {\n                paramStr += encodeURIComponent(name) + '=' +\n                    encodeURIComponent(value) + '&';\n            }\n        }\n        return paramStr.length ? paramStr.substr(0, paramStr.length - 1) : paramStr;\n    }\n}\n"],"sourceRoot":"webpack:///"}